import { useState } from "react";
import { Upload, FileText, CheckCircle, AlertTriangle } from "lucide-react";

export default function ResumeChecker() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState(null);
  const [selectedDomain, setSelectedDomain] = useState("software");

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setSelectedFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileSelect = (e) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  const handleUpload = () => {
    setIsLoading(true);
    setError(null);
    
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      setResults({
        score: 85,
        strengths: ["Clear work experience", "Good technical skills", "Well-structured format"],
        improvements: ["Add more quantifiable achievements", "Include relevant certifications"]
      });
    }, 2000);
  };

  return (
    <div className="bg-gradient-to-br from-blue-50 to-blue-100 min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-xl overflow-hidden">
        <div className="bg-gradient-to-r from-blue-600 to-cyan-400 p-6 text-white">
          <h1 className="text-2xl font-bold text-center">Resume Checker</h1>
          <p className="text-blue-100 text-center mt-1">Get expert feedback on your resume</p>
        </div>
        
        <div className="p-6">
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Select Job Domain</label>
            <select 
              className="w-full px-4 py-3 rounded-lg border border-blue-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50 bg-blue-50 text-gray-700"
              value={selectedDomain}
              onChange={(e) => setSelectedDomain(e.target.value)}
            >
              <option value="software">Software Development</option>
              <option value="data">Data Science</option>
              <option value="marketing">Marketing</option>
              <option value="design">Design</option>
              <option value="finance">Finance</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div
            className={`relative border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all ${
              isDragging ? "border-blue-500 bg-blue-50" : "border-blue-300 hover:border-blue-400"
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            onClick={() => document.getElementById("file-input").click()}
          >
            <input
              id="file-input"
              type="file"
              accept=".pdf,.doc,.docx"
              className="hidden"
              onChange={handleFileSelect}
            />
            
            <div className="flex flex-col items-center">
              {selectedFile ? (
                <>
                  <FileText size={48} className="text-blue-500 mb-3" />
                  <p className="font-medium text-gray-800">{selectedFile.name}</p>
                  <p className="text-sm text-gray-500 mt-1">
                    {(selectedFile.size / 1024).toFixed(1)} KB
                  </p>
                </>
              ) : (
                <>
                  <Upload size={48} className="text-blue-500 mb-3" />
                  <p className="font-medium text-gray-700">Drag & drop your resume</p>
                  <p className="text-sm text-gray-500 mt-1">
                    or click to browse (PDF, DOC, DOCX)
                  </p>
                </>
              )}
            </div>
          </div>
          
          <button
            className="w-full mt-6 px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-500 text-white font-medium rounded-lg shadow-md hover:from-blue-700 hover:to-cyan-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-all disabled:opacity-60 disabled:cursor-not-allowed disabled:hover:from-blue-600 disabled:hover:to-cyan-500"
            disabled={!selectedFile || isLoading}
            onClick={handleUpload}
          >
            {isLoading ? "Analyzing..." : "Analyze Resume"}
          </button>
          
          {error && (
            <div className="mt-4 p-4 bg-red-50 text-red-700 rounded-lg flex items-center">
              <AlertTriangle size={20} className="mr-2 flex-shrink-0" />
              <p>{error}</p>
            </div>
          )}
          
          {isLoading && (
            <div className="mt-6 flex flex-col items-center justify-center">
              <div className="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
              <p className="mt-3 text-gray-600">Analyzing your resume...</p>
            </div>
          )}
          
          {results && !isLoading && (
            <div className="mt-6 bg-blue-50 rounded-lg p-5">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-bold text-gray-800">Results</h3>
                <div className="text-lg font-bold text-blue-700">{results.score}/100</div>
              </div>
              
              <div className="mb-4">
                <h4 className="flex items-center text-green-700 font-medium mb-2">
                  <CheckCircle size={18} className="mr-2" />
                  Strengths
                </h4>
                <ul className="pl-8 list-disc text-gray-700">
                  {results.strengths.map((strength, index) => (
                    <li key={index} className="mb-1">{strength}</li>
                  ))}
                </ul>
              </div>
              
              <div>
                <h4 className="flex items-center text-amber-700 font-medium mb-2">
                  <AlertTriangle size={18} className="mr-2" />
                  Areas to Improve
                </h4>
                <ul className="pl-8 list-disc text-gray-700">
                  {results.improvements.map((improvement, index) => (
                    <li key={index} className="mb-1">{improvement}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
