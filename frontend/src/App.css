import { useState, useEffect } from 'react';
import { CheckCircle, Info, AlertTriangle, FileText, X, UploadCloud, Loader } from 'lucide-react';

export default function ResumeChecker() {
  const [resume, setResume] = useState('');
  const [jobDescription, setJobDescription] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState(null);
  const [dragActive, setDragActive] = useState(false);
  const [fileUploaded, setFileUploaded] = useState(false);
  const [fileName, setFileName] = useState('');
  
  // Sample analysis logic (replace with actual implementation)
  const analyzeResume = () => {
    if (!resume || !jobDescription) return;
    
    setIsAnalyzing(true);
    
    // Simulate API call with timeout
    setTimeout(() => {
      // Sample results
      const extractedSkills = extractSkills(resume);
      const jdSkills = extractSkills(jobDescription);
      
      const matchingSkills = extractedSkills.filter(skill => 
        jdSkills.some(jdSkill => jdSkill.toLowerCase() === skill.toLowerCase())
      );
      
      const missingSkills = jdSkills.filter(skill => 
        !extractedSkills.some(resumeSkill => resumeSkill.toLowerCase() === skill.toLowerCase())
      );
      
      setResults({
        matchRate: Math.round((matchingSkills.length / jdSkills.length) * 100),
        extractedSkills,
        matchingSkills,
        missingSkills,
        recommendations: generateRecommendations(matchingSkills, missingSkills)
      });
      
      setIsAnalyzing(false);
    }, 2000);
  };
  
  // Simple skill extraction function
  const extractSkills = (text) => {
    // This is a simplified version. In a real application, you would use NLP or a more sophisticated algorithm
    const commonSkills = [
      'JavaScript', 'React', 'Node.js', 'Python', 'Java', 'C++', 'SQL',
      'Machine Learning', 'Data Analysis', 'AWS', 'Azure', 'Docker', 'Kubernetes',
      'Communication', 'Leadership', 'Project Management', 'Agile', 'Scrum',
      'Problem Solving', 'Critical Thinking', 'Teamwork', 'Collaboration'
    ];
    
    return commonSkills.filter(skill => 
      text.toLowerCase().includes(skill.toLowerCase())
    );
  };
  
  // Generate recommendations based on skills
  const generateRecommendations = (matching, missing) => {
    const recommendations = [];
    
    if (matching.length / (matching.length + missing.length) < 0.5) {
      recommendations.push('Your resume matches less than 50% of required skills. Consider addressing the missing skills.');
    }
    
    if (missing.length > 0) {
      recommendations.push(`Add these key skills to your resume: ${missing.join(', ')}`);
    }
    
    if (matching.length < 3) {
      recommendations.push('Enhance your resume with more relevant skills from the job description.');
    }
    
    return recommendations.length > 0 ? recommendations : ['Your resume is well-aligned with the job requirements!'];
  };
  
  // Handle file upload
  const handleFileUpload = async (file) => {
    try {
      const text = await readFileAsText(file);
      setResume(text);
      setFileUploaded(true);
      setFileName(file.name);
    } catch (error) {
      console.error('Error reading file:', error);
      alert('Error reading file. Please try again.');
    }
  };
  
  // Read file as text
  const readFileAsText = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => resolve(event.target.result);
      reader.onerror = (error) => reject(error);
      reader.readAsText(file);
    });
  };
  
  // Handle drag events
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };
  
